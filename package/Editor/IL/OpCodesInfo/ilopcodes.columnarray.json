{
   "Opcode":["0x58","0xD6","0xD7","0x5F","0xFE 0x00","0x3B","0x2E","0x3C","0x2F","0x41","0x34","0x3D","0x30","0x42","0x35","0x3E","0x31","0x43","0x36","0x3F","0x32","0x44","0x37","0x40","0x33","0x8C","0x38","0x2B","0x01","0x39","0x2C","0x3A","0x2D","0x39","0x2C","0x3A","0x2D","0x39","0x2C","0x28","0x29","0x6F","0x74","0xFE 0x01","0xFE 0x02","0xFE 0x03","0xC3","0xFE 0x04","0xFE 0x05","0xFE 0x16","0xD3","0x67","0x68","0x69","0x6A","0xD4","0x8A","0xB3","0x82","0xB5","0x83","0xB7","0x84","0xB9","0x85","0xD5","0x8B","0xB4","0x86","0xB6","0x87","0xB8","0x88","0xBA","0x89","0x76","0x6B","0x6C","0xE0","0xD2","0xD1","0x6D","0x6E","0xFE 0x17","0x70","0x5B","0x5C","0x25","0xDC","0xFE 0x11","0xDC","0xFE 0x18","0xFE 0x15","0x75","0x27","0xFE 0x09","0x02","0x03","0x04","0x05","0x0E","0xFE 0x0A","0x0F","0x20","0x16","0x17","0x18","0x19","0x1A","0x1B","0x1C","0x1D","0x1E","0x15","0x15","0x1F","0x21","0x22","0x23","0xA3","0x97","0x90","0x92","0x94","0x96","0x98","0x99","0x9A","0x91","0x93","0x95","0x96","0x8F","0x7B","0x7C","0xFE 0x06","0x4D","0x46","0x48","0x4A","0x4C","0x4E","0x4F","0x50","0x47","0x49","0x4B","0x4C","0x8E","0xFE 0x0C","0x06","0x07","0x08","0x09","0x11","0xFE 0x0D","0x12","0x14","0x71","0x7E","0x7F","0x72","0xD0","0xFE 0x07","0xDD","0xDE","0xFE 0x0F","0xC6","0x5A","0xD8","0xD9","0x65","0x8D","0x73","0xFE 0x19","0x00","0x66","0x60","0x26","0xFE 0x1E","0xFE 0x1D","0xC2","0x5D","0x5E","0x2A","0xFE 0x1A","0x62","0x63","0x64","0xFE 0x1C","0xFE 0x0B","0x10","0xA4","0x9B","0x9C","0x9D","0x9E","0x9F","0xA0","0xA1","0xA2","0x7D","0xDF","0x52","0x53","0x54","0x55","0x56","0x57","0x51","0xFE 0x0E","0x0A","0x0B","0x0C","0x0D","0x13","0x81","0x80","0x59","0xDA","0xDB","0x45","0xFE 0x14","0x7A","0xFE 0x12","0x79","0xA5","0xFE 0x13","0x61"],
   "Instruction":["add","add.ovf","add.ovf.un","and","arglist","beq <int32 (target)>","beq.s <int8 (target)>","bge <int32 (target)>","bge.s <int8 (target)>","bge.un <int32 (target)>","bge.un.s <int8 (target)>","bgt <int32 (target)>","bgt.s <int8 (target)>","bgt.un <int32 (target)>","bgt.un.s <int8 (target)>","ble <int32 (target)>","ble.s <int8 (target)>","ble.un <int32 (target)>","ble.un.s <int8 (target)>","blt <int32 (target)>","blt.s <int8 (target)>","blt.un <int32 (target)>","blt.un.s <int8 (target)>","bne.un <int32 (target)>","bne.un.s <int8 (target)>","box <typeTok>","br <int32 (target)>","br.s <int8 (target)>","break","brfalse <int32 (target)>","brfalse.s <int8 (target)>","brinst <int32 (target)>","brinst.s <int8 (target)>","brnull <int32 (target)>","brnull.s <int8 (target)>","brtrue <int32 (target)>","brtrue.s <int8 (target)>","brzero <int32 (target)>","brzero.s <int8 (target)>","call <method>","calli <callsitedescr>","callvirt <method>","castclass <class>","ceq","cgt","cgt.un","ckfinite","clt","clt.un","constrained. <thisType>","conv.i","conv.i1","conv.i2","conv.i4","conv.i8","conv.ovf.i","conv.ovf.i.un","conv.ovf.i1","conv.ovf.i1.un","conv.ovf.i2","conv.ovf.i2.un","conv.ovf.i4","conv.ovf.i4.un","conv.ovf.i8","conv.ovf.i8.un","conv.ovf.u","conv.ovf.u.un","conv.ovf.u1","conv.ovf.u1.un","conv.ovf.u2","conv.ovf.u2.un","conv.ovf.u4","conv.ovf.u4.un","conv.ovf.u8","conv.ovf.u8.un","conv.r.un","conv.r4","conv.r8","conv.u","conv.u1","conv.u2","conv.u4","conv.u8","cpblk","cpobj <typeTok>","div","div.un","dup","endfault","endfilter","endfinally","initblk","initobj <typeTok>","isinst <class>","jmp <method>","ldarg <uint16 (num)>","ldarg.0","ldarg.1","ldarg.2","ldarg.3","ldarg.s <uint8 (num)>","ldarga <uint16 (argNum)>","ldarga.s <uint8 (argNum)>","ldc.i4 <int32 (num)>","ldc.i4.0","ldc.i4.1","ldc.i4.2","ldc.i4.3","ldc.i4.4","ldc.i4.5","ldc.i4.6","ldc.i4.7","ldc.i4.8","ldc.i4.m1","ldc.i4.M1","ldc.i4.s <int8 (num)>","ldc.i8 <int64 (num)>","ldc.r4 <float32 (num)>","ldc.r8 <float64 (num)>","ldelem <typeTok>","ldelem.i","ldelem.i1","ldelem.i2","ldelem.i4","ldelem.i8","ldelem.r4","ldelem.r8","ldelem.ref","ldelem.u1","ldelem.u2","ldelem.u4","ldelem.u8","ldelema <class>","ldfld <field>","ldflda <field>","ldftn <method>","ldind.i","ldind.i1","ldind.i2","ldind.i4","ldind.i8","ldind.r4","ldind.r8","ldind.ref","ldind.u1","ldind.u2","ldind.u4","ldind.u8","ldlen","ldloc <uint16 (indx)>","ldloc.0","ldloc.1","ldloc.2","ldloc.3","ldloc.s <uint8 (indx)>","ldloca <uint16 (indx)>","ldloca.s <uint8 (indx)>","ldnull","ldobj <typeTok>","ldsfld <field>","ldsflda <field>","ldstr <string>","ldtoken <token>","ldvirtftn <method>","leave <int32 (target)>","leave.s <int8 (target)>","localloc","mkrefany <class>","mul","mul.ovf","mul.ovf.un","neg","newarr <etype>","newobj <ctor>","no. {  typecheck,  rangecheck,  nullcheck  }","nop","not","or","pop","readonly.","refanytype","refanyval <type>","rem","rem.un","ret","rethrow","shl","shr","shr.un","sizeof <typeTok>","starg <uint16 (num)>","starg.s <uint8 (num)>","stelem <typeTok>","stelem.i","stelem.i1","stelem.i2","stelem.i4","stelem.i8","stelem.r4","stelem.r8","stelem.ref","stfld <field>","stind.i","stind.i1","stind.i2","stind.i4","stind.i8","stind.r4","stind.r8","stind.ref","stloc <uint16 (indx)>","stloc.0","stloc.1","stloc.2","stloc.3","stloc.s <uint8 (indx)>","stobj <typeTok>","stsfld <field>","sub","sub.ovf","sub.ovf.un","switch <uint32, int32, int32 (t1..tN)>","tail.","throw","unaligned. (alignment)","unbox <valuetype>","unbox.any <typeTok>","volatile.","xor"],
   "Description":["Add two values, returning a new value.","Add signed integer values with overflow check.","Add unsigned integer values with overflow check.","Bitwise AND of two integral values, returns an integral value.","Return argument list handle for the current method.","Branch to target if equal.","Branch to target if equal, short form.","Branch to target if greater than or equal to.","Branch to target if greater than or equal to, short form.","Branch to target if greater than or equal to (unsigned or unordered).","Branch to target if greater than or equal to (unsigned or unordered), short form","Branch to target if greater than.","Branch to target if greater than, short form.","Branch to target if greater than (unsigned or unordered).","Branch to target if greater than (unsigned or unordered), short form.","Branch to target if less than or equal to.","Branch to target if less than or equal to, short form.","Branch to target if less than or equal to (unsigned or unordered).","Branch to target if less than or equal to (unsigned or unordered), short form","Branch to target if less than.","Branch to target if less than, short form.","Branch to target if less than (unsigned or unordered).","Branch to target if less than (unsigned or unordered), short form.","Branch to target if unequal or unordered.","Branch to target if unequal or unordered, short form.","Convert a boxable value to its boxed form","Branch to target.","Branch to target, short form.","Inform a debugger that a breakpoint has been reached.","Branch to target if value is zero (false).","Branch to target if value is zero (false), short form.","Branch to target if value is a non-null object reference (alias for brtrue).","Branch to target if value is a non-null object reference, short form (alias for brtrue.s).","Branch to target if value is null (alias for brfalse).","Branch to target if value is null (alias for brfalse.s), short form.","Branch to target if value is non-zero (true).","Branch to target if value is non-zero (true), short form.","Branch to target if value is zero (alias for brfalse).","Branch to target if value is zero (alias for brfalse.s), short form.","Call method described by method.","Call method indicated on the stack with arguments described by callsitedescr.","Call a method associated with an object.","Cast obj to class.","Push 1 (of type int32) if value1 equals value2, else push 0.","Push 1 (of type int32) if value1 > value2, else push 0.","Push 1 (of type int32) if value1 > value2, unsigned or unordered, else push 0.","Throw ArithmeticException if value is not a finite number.","Push 1 (of type int32) if value1 < value2, else push 0.","Push 1 (of type int32) if value1 < value2, unsigned or unordered, else push 0.","Call a virtual method on a type constrained to be type T","Convert to native int, pushing native int on stack.","Convert to int8, pushing int32 on stack.","Convert to int16, pushing int32 on stack.","Convert to int32, pushing int32 on stack.","Convert to int64, pushing int64 on stack.","Convert to a native int (on the stack as native int) and throw an exception on overflow.","Convert unsigned to a native int (on the stack as native int) and throw an exception on overflow.","Convert to an int8 (on the stack as int32) and throw an exception on overflow.","Convert unsigned to an int8 (on the stack as int32) and throw an exception on overflow.","Convert to an int16 (on the stack as int32) and throw an exception on overflow.","Convert unsigned to an int16 (on the stack as int32) and throw an exception on overflow.","Convert to an int32 (on the stack as int32) and throw an exception on overflow.","Convert unsigned to an int32 (on the stack as int32) and throw an exception on overflow.","Convert to an int64 (on the stack as int64) and throw an exception on overflow.","Convert unsigned to an int64 (on the stack as int64) and throw an exception on overflow.","Convert to a native unsigned int (on the stack as native int) and throw an exception on overflow.","Convert unsigned to a native unsigned int (on the stack as native int) and throw an exception on overflow.","Convert to an unsigned int8 (on the stack as int32) and throw an exception on overflow.","Convert unsigned to an unsigned int8 (on the stack as int32) and throw an exception on overflow.","Convert to an unsigned int16 (on the stack as int32) and throw an exception on overflow.","Convert unsigned to an unsigned int16 (on the stack as int32) and throw an exception on overflow.","Convert to an unsigned int32 (on the stack as int32) and throw an exception on overflow.","Convert unsigned to an unsigned int32 (on the stack as int32) and throw an exception on overflow.","Convert to an unsigned int64 (on the stack as int64) and throw an exception on overflow.","Convert unsigned to an unsigned int64 (on the stack as int64) and throw an exception on overflow.","Convert unsigned integer to floating-point, pushing F on stack.","Convert to float32, pushing F on stack.","Convert to float64, pushing F on stack.","Convert to native unsigned int, pushing native int on stack.","Convert to unsigned int8, pushing int32 on stack.","Convert to unsigned int16, pushing int32 on stack.","Convert to unsigned int32, pushing int32 on stack.","Convert to unsigned int64, pushing int64 on stack.","Copy data from memory to memory.","Copy a value type from src to dest.","Divide two values to return a quotient or floating-point result.","Divide two values, unsigned, returning a quotient.","Duplicate the value on the top of the stack.","End fault clause of an exception block.","End an exception handling filter clause.","End finally clause of an exception block.","Set all bytes in a block of memory to a given byte value.","Initialize the value at address dest.","Test if obj is an instance of class, returning null or an instance of that class or interface.","Exit current method and jump to the specified method.","Load argument numbered num onto the stack.","Load argument 0 onto the stack.","Load argument 1 onto the stack.","Load argument 2 onto the stack.","Load argument 3 onto the stack.","Load argument numbered num onto the stack, short form.","Fetch the address of argument argNum.","Fetch the address of argument argNum, short form.","Push num of type int32 onto the stack as int32.","Push 0 onto the stack as int32.","Push 1 onto the stack as int32.","Push 2 onto the stack as int32.","Push 3 onto the stack as int32.","Push 4 onto the stack as int32.","Push 5 onto the stack as int32.","Push 6 onto the stack as int32.","Push 7 onto the stack as int32.","Push 8 onto the stack as int32.","Push -1 onto the stack as int32.","Push -1 onto the stack as int32 (alias for ldc.i4.m1).","Push num onto the stack as int32, short form.","Push num of type int64 onto the stack as int64.","Push num of type float32 onto the stack as F.","Push num of type float64 onto the stack as F.","Load the element at index onto the top of the stack.","Load the element with type native int at index onto the top of the stack as a native int.","Load the element with type int8 at index onto the top of the stack as an int32.","Load the element with type int16 at index onto the top of the stack as an int32.","Load the element with type int32 at index onto the top of the stack as an int32.","Load the element with type int64 at index onto the top of the stack as an int64.","Load the element with type float32 at index onto the top of the stack as an F","Load the element with type float64 at index onto the top of the stack as an F.","Load the element at index onto the top of the stack as an O. The type of the O is the same as the element type of the array pushed on the CIL stack.","Load the element with type unsigned int8 at index onto the top of the stack as an int32.","Load the element with type unsigned int16 at index onto the top of the stack as an int32.","Load the element with type unsigned int32 at index onto the top of the stack as an int32.","Load the element with type unsigned int64 at index onto the top of the stack as an int64 (alias for ldelem.i8).","Load the address of element at index onto the top of the stack.","Push the value of field of object (or value type) obj, onto the stack.","Push the address of field of object obj on the stack.","Push a pointer to a method referenced by method, on the stack.","Indirect load value of type native int as native int on the stack","Indirect load value of type int8 as int32 on the stack.","Indirect load value of type int16 as int32 on the stack.","Indirect load value of type int32 as int32 on the stack.","Indirect load value of type int64 as int64 on the stack.","Indirect load value of type float32 as F on the stack.","Indirect load value of type float64 as F on the stack.","Indirect load value of type object ref as O on the stack.","Indirect load value of type unsigned int8 as int32 on the stack","Indirect load value of type unsigned int16 as int32 on the stack","Indirect load value of type unsigned int32 as int32 on the stack","Indirect load value of type unsigned int64 as int64 on the stack (alias for ldind.i8).","Push the length (of type native unsigned int) of array on the stack.","Load local variable of index indx onto stack.","Load local variable 0 onto stack.","Load local variable 1 onto stack.","Load local variable 2 onto stack.","Load local variable 3 onto stack.","Load local variable of index indx onto stack, short form.","Load address of local variable with index indx.","Load address of local variable with index indx, short form.","Push a null reference on the stack.","Copy the value stored at address src to the stack.","Push the value of the static field on the stack.","Push the address of the static field, field, on the stack.","Push a string object for the literal string.","Convert metadata token to its runtime representation.","Push address of virtual method on the stack.","Exit a protected region of code.","Exit a protected region of code, short form.","Allocate space from the local memory pool.","Push a typed reference to ptr of type class onto the stack.","Multiply values.","Multiply signed integer values. Signed result shall fit in same size","Multiply unsigned integer values. Unsigned result shall fit in same size","Negate value.","Create a new array with elements of type etype.","Allocate an uninitialized object or value type and call ctor.","The specified fault check(s) normally performed as part of the execution of the subsequent instruction can/shall be skipped.","Do nothing (No operation).","Bitwise complement (logical not).","Bitwise OR of two integer values, returns an integer.","Pop value from the stack.","Specify that the subsequent array address operation performs no type check at runtime, and that it returns a controlled-mutability managed pointer","Push the type token stored in a typed reference.","Push the address stored in a typed reference.","Remainder when dividing one value by another.","Remainder when dividing one unsigned value by another.","Return from method, possibly with a value.","Rethrow the current exception.","Shift an integer left (shifting in zeros), return an integer.","Shift an integer right (shift in sign), return an integer.","Shift an integer right (shift in zero), return an integer.","Push the size, in bytes, of a type as an unsigned int32.","Store value to the argument numbered num.","Store value to the argument numbered num, short form.","Replace array element at index with the value on the stack","Replace array element at index with the i value on the stack.","Replace array element at index with the int8 value on the stack.","Replace array element at index with the int16 value on the stack.","Replace array element at index with the int32 value on the stack.","Replace array element at index with the int64 value on the stack.","Replace array element at index with the float32 value on the stack.","Replace array element at index with the float64 value on the stack.","Replace array element at index with the ref value on the stack.","Replace the value of field of the object obj with value.","Store value of type native int into memory at address","Store value of type int8 into memory at address","Store value of type int16 into memory at address","Store value of type int32 into memory at address","Store value of type int64 into memory at address","Store value of type float32 into memory at address","Store value of type float64 into memory at address","Store value of type object ref (type O) into memory at address","Pop a value from stack into local variable indx.","Pop a value from stack into local variable 0.","Pop a value from stack into local variable 1.","Pop a value from stack into local variable 2.","Pop a value from stack into local variable 3.","Pop a value from stack into local variable indx, short form.","Store a value of type typeTok at an address.","Replace the value of the static field with val.","Subtract value2 from value1, returning a new value.","Subtract native int from a native int. Signed result shall fit in same size","Subtract native unsigned int from a native unsigned int. Unsigned result shall fit in same size.","Jump to one of n values.","Subsequent call terminates current method","Throw an exception.","Subsequent pointer instruction might be unaligned.","Extract a value-type from obj, its boxed representation, and push a controlled-mutability managed pointer to it to the top of the stack","Extract a value-type from obj, its boxed representation, and copy to the top of the stack","Subsequent pointer reference is volatile.","Bitwise XOR of integer values, returns an integer."],
   "Type of instruction":["Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Prefix to instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Object model instruction","Prefix to instruction","Base instruction","Base instruction","Base instruction","Base instruction","Prefix to instruction","Object model instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Base instruction","Base instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Base instruction","Object model instruction","Object model instruction","Base instruction","Base instruction","Base instruction","Base instruction","Prefix to instruction","Object model instruction","Prefix to instruction","Object model instruction","Object model instruction","Prefix to instruction","Base instruction"]
}